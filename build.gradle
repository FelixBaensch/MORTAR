import java.util.regex.Matcher

plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
}

group 'de.unijena.cheminf'
version '1.0.2.0'

sourceCompatibility = 1.17

//Creates javadoc and sources jars
java {
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
}

def javaFxVersion = '17.0.2'

dependencies {
    implementation 'org.jetbrains:annotations:19.0.0'
    testImplementation group: 'junit', name: 'junit', version: '4.13'
    implementation group: 'org.openscience.cdk', name: 'cdk-bundle', version: '2.7.1'
    implementation group: 'com.github.librepdf', name: 'openpdf', version: '1.3.26'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'linux-aarch64'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'mac-aarch64'
    implementation group: 'org.openjfx', name: 'javafx-swing', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-swing', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-swing', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-swing', version: javaFxVersion, classifier: 'linux-aarch64'
    implementation group: 'org.openjfx', name: 'javafx-swing', version: javaFxVersion, classifier: 'mac-aarch64'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'linux-aarch64'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'mac-aarch64'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'linux-aarch64'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'mac-aarch64'
}

mainClassName = 'de.unijena.cheminf.mortar.main.Main'
applicationName = 'MORTAR'

applicationDefaultJvmArgs = ["-Xms4g", "-Xmx4g"]

/*
* Merges the exact enumeration of all library jars into one single path giving all the files and subfolders in 'lib'.
* This is necessary because lines that are too long cause errors in batch files.
* The unix script still has to be tested!
*/
startScripts {
    doLast {
        windowsScript.text = windowsScript.text.replaceAll('set CLASSPATH=.*', 'set CLASSPATH=.;%APP_HOME%/lib/*')
        windowsScript.text = windowsScript.text.replace("set JAVA_HOME=%JAVA_HOME:\"=%",
                "set JAVA_HOME=%APP_HOME%\\jdk-17.0.4_8_jre\\")
        windowsScript.text = windowsScript.text.replaceAll("java.exe", "javaw.exe")
        windowsScript.text = windowsScript.text.replace("\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS%", "start \"MORTAR\" \"%JAVA_EXE%\" %DEFAULT_JVM_OPTS%") //dirty workaround to suppress command window
        unixScript.text = unixScript.text.replaceAll('CLASSPATH=\\Q$\\EAPP_HOME/lib.*', Matcher.quoteReplacement('CLASSPATH=$APP_HOME/lib/*'))
    }
}

task updateHeapSpace20GbExtraRunApp(type: CreateStartScripts) {
    mainClassName = 'de.unijena.cheminf.mortar.main.Main'
    classpath = startScripts.classpath
    outputDir = file('build/scripts')
    applicationName = 'MORTAR_20GB'
    defaultJvmOpts = ["-Xms20g", "-Xmx20g"]

    updateHeapSpace20GbExtraRunApp {
        doLast {
            windowsScript.text = windowsScript.text.replaceAll('set CLASSPATH=.*', 'set CLASSPATH=.;%APP_HOME%/lib/*')
            windowsScript.text = windowsScript.text.replace("set JAVA_HOME=%JAVA_HOME:\"=%",
                    "set JAVA_HOME=%APP_HOME%\\jdk-17.0.4_8_jre\\")
            windowsScript.text = windowsScript.text.replaceAll("java.exe", "javaw.exe")
            windowsScript.text = windowsScript.text.replace("\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS%", "start \"MORTAR\" \"%JAVA_EXE%\" %DEFAULT_JVM_OPTS%") //dirty workaround to suppress command window
            unixScript.text = unixScript.text.replaceAll('CLASSPATH=\\Q$\\EAPP_HOME/lib.*', Matcher.quoteReplacement('CLASSPATH=$APP_HOME/lib/*'))
        }
    }
}

applicationDistribution.into("bin") {
    duplicatesStrategy= DuplicatesStrategy.EXCLUDE
    from(updateHeapSpace20GbExtraRunApp)
    fileMode = 0755
}

//Needed to make the created jar archives executable
jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

//Creates a jar archive that includes all dependencies of the project, i.e. that  MORTAR can be started by executing this jar
task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'MORTAR Fat Jar File',
        'Implementation-Version': archiveVersion,
        'Main-Class': mainClassName
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
    archiveAppendix = 'fat'
    from {
//        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
    with jar
}

//Archives artifacts executed with build
artifacts {
    archives fatJar
}

//Includes the Adopt Open JDK folder in the project's root directory in the created archives for distribution
distributions {
    main {
        contents {
            from 'AdoptOpenJDK'
            into('tutorial'){
                from 'Tutorial'
            }
        }
    }
}