import java.util.regex.Matcher

plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.8'
}

group 'de.unijena.cheminf'
version '0.1'

sourceCompatibility = 1.11

//Creates javadoc and sources jars
java {
    withJavadocJar()
    withSourcesJar()
}

//The supplied Adopt Open JDK is used for compilation and running
//TODO: Omit?
compileJava.options.fork = true
//compileJava.options.forkOptions.executable = System.getProperty("user.dir") + File.separator + 'AdoptOpenJDK' + File.separator + 'jdk-11.0.5_10' +  File.separator + 'bin' + File.separator + 'javac'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.jetbrains:annotations:19.0.0'
    testImplementation group: 'junit', name: 'junit', version: '4.13'
    implementation group: 'org.openscience.cdk', name: 'cdk-bundle', version: '2.6'
    implementation group: 'com.github.librepdf', name: 'openpdf', version: '1.3.26'
}

javafx {
    version = '11.0.2'
    modules = ['javafx.controls', 'javafx.swing']
}

mainClassName = 'de.unijena.cheminf.mortar.main.Main'

/*
* Merges the exact enumeration of all library jars into one single path giving all the files and subfolders in 'lib'.
* This is necessary because lines that are too long cause errors in batch files.
* The unix script still has to be tested!
*/
startScripts {
    doLast {
        windowsScript.text = windowsScript.text.replaceAll('set CLASSPATH=.*', 'set CLASSPATH=.;%APP_HOME%/lib/*')
        unixScript.text = unixScript.text.replaceAll('CLASSPATH=\\Q$\\EAPP_HOME/lib.*', Matcher.quoteReplacement('CLASSPATH=$APP_HOME/lib/*'))
        windowsScript.text = windowsScript.text.replace("set JAVA_HOME=%JAVA_HOME:\"=%",
                "set JAVA_HOME=%APP_HOME%\\jdk-11.0.5_10\\")
    }
}

//Needed to make the created jar archives executable
jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

//Creates a jar archive that includes all dependencies of the project, i.e. that  MORTAR can be started by executing this jar
task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'MORTAR Fat Jar File',
        'Implementation-Version': archiveVersion,
        'Main-Class': mainClassName
    }
    archiveBaseName = project.name + '-fat'
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}

//Archives artifacts executed with build
artifacts {
    archives fatJar
}

//Includes the Adopt Open JDK folder in the project's root directory in the created archives for distribution
distributions {
    main {
        contents {
            from 'AdoptOpenJDK'
        }
    }
}